import { FormControl } from '@angular/forms';
import { MetadataKeys } from '@libertyware/ngx-form-core';
export class DynamicFormControl extends FormControl {
    constructor(fieldDefinition) {
        super(fieldDefinition.data, fieldDefinition.validationFunctions);
        this.validationDefinitions = fieldDefinition.validationDefinitions;
    }
    get formModel() {
        return this.parent.object;
    }
    get hint() {
        return this.metaData(MetadataKeys.HINT);
    }
    get readableName() {
        return this.metaData(MetadataKeys.DISPLAY_NAME) || this.ControlName;
    }
    get placeholder() {
        return this.metaData(MetadataKeys.PLACEHOLDER);
    }
    metaData(key) {
        return Reflect.getMetadata(key, this.formModel, this.ControlName);
    }
    get ControlName() {
        const controls = this.parent.controls;
        return Object.keys(controls).find(name => this === controls[name]);
    }
    get radioOptions() {
        return this.metaData(MetadataKeys.RADIO_OPTIONS) || [];
    }
    get textareaOptions() {
        return this.metaData(MetadataKeys.TEXTAREA_OPTIONS);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGliZXJ0eXdhcmUvbmd4LWZvcm0tYnVpbGRlci8iLCJzb3VyY2VzIjpbInV0aWxzL2R5bmFtaWMtZm9ybS1jb250cm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUErQixNQUFNLDRCQUE0QixDQUFDO0FBS3ZGLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxXQUFXO0lBR2pELFlBQVksZUFBc0M7UUFDaEQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFakUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNyRSxDQUFDO0lBRUQsSUFBWSxTQUFTO1FBQ25CLE9BQVEsSUFBSSxDQUFDLE1BQWdDLENBQUMsTUFBTSxDQUFDO0lBQ3ZELENBQUM7SUFHRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDdEUsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFXO1FBQzFCLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzNDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFXLENBQUM7SUFDL0UsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbk1ldGFkYXRhIH0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yL21ldGFkYXRhL1ZhbGlkYXRpb25NZXRhZGF0YSc7XG5pbXBvcnQgeyBNZXRhZGF0YUtleXMsIFJhZGlvT3B0aW9uLCBUZXh0YXJlYU9wdGlvbiB9IGZyb20gJ0BsaWJlcnR5d2FyZS9uZ3gtZm9ybS1jb3JlJztcblxuaW1wb3J0IHsgRHluYW1pY0Zvcm1Hcm91cEZpZWxkIH0gZnJvbSAnLi4vbW9kZWxzL2R5bmFtaWMtZm9ybS1ncm91cC1maWVsZCc7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUdyb3VwIH0gZnJvbSAnLi9keW5hbWljLWZvcm0tZ3JvdXAnO1xuXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db250cm9sIGV4dGVuZHMgRm9ybUNvbnRyb2wge1xuICBwdWJsaWMgdmFsaWRhdGlvbkRlZmluaXRpb25zOiBWYWxpZGF0aW9uTWV0YWRhdGFbXTtcblxuICBjb25zdHJ1Y3RvcihmaWVsZERlZmluaXRpb246IER5bmFtaWNGb3JtR3JvdXBGaWVsZCkge1xuICAgIHN1cGVyKGZpZWxkRGVmaW5pdGlvbi5kYXRhLCBmaWVsZERlZmluaXRpb24udmFsaWRhdGlvbkZ1bmN0aW9ucyk7XG5cbiAgICB0aGlzLnZhbGlkYXRpb25EZWZpbml0aW9ucyA9IGZpZWxkRGVmaW5pdGlvbi52YWxpZGF0aW9uRGVmaW5pdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGdldCBmb3JtTW9kZWwoKTogYW55IHtcbiAgICByZXR1cm4gKHRoaXMucGFyZW50IGFzIER5bmFtaWNGb3JtR3JvdXA8YW55Pikub2JqZWN0O1xuICB9XG5cblxuICBnZXQgaGludCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1ldGFEYXRhKE1ldGFkYXRhS2V5cy5ISU5UKTtcbiAgfVxuXG4gIGdldCByZWFkYWJsZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tZXRhRGF0YShNZXRhZGF0YUtleXMuRElTUExBWV9OQU1FKSB8fCB0aGlzLkNvbnRyb2xOYW1lO1xuICB9XG5cbiAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubWV0YURhdGEoTWV0YWRhdGFLZXlzLlBMQUNFSE9MREVSKTtcbiAgfVxuXG4gIHByaXZhdGUgbWV0YURhdGEoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKGtleSwgdGhpcy5mb3JtTW9kZWwsIHRoaXMuQ29udHJvbE5hbWUpO1xuICB9XG5cbiAgZ2V0IENvbnRyb2xOYW1lKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY29udHJvbHM6IGFueSA9IHRoaXMucGFyZW50LmNvbnRyb2xzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhjb250cm9scykuZmluZChuYW1lID0+IHRoaXMgPT09IGNvbnRyb2xzW25hbWVdKSBhcyBzdHJpbmc7XG4gIH1cblxuICBnZXQgcmFkaW9PcHRpb25zKCk6IFJhZGlvT3B0aW9uW10ge1xuICAgIHJldHVybiB0aGlzLm1ldGFEYXRhKE1ldGFkYXRhS2V5cy5SQURJT19PUFRJT05TKSB8fCBbXTtcbiAgfVxuXG4gIGdldCB0ZXh0YXJlYU9wdGlvbnMoKTogVGV4dGFyZWFPcHRpb24ge1xuICAgIHJldHVybiB0aGlzLm1ldGFEYXRhKE1ldGFkYXRhS2V5cy5URVhUQVJFQV9PUFRJT05TKTtcbiAgfVxufVxuIl19